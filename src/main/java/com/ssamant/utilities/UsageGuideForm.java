/*
 * The MIT License
 *
 * Copyright 2020 Sunil.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.ssamant.utilities;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Sunil
 */
public class UsageGuideForm extends javax.swing.JFrame {

    /**
     * Creates new form UsageGuideForm
     */
    public UsageGuideForm() {
        initComponents();
        displayUsageGuidelines();
        setWindowSize();
    }

    private void setWindowSize() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    public final void displayUsageGuidelines() {
        //txtPaneUsageGuide.setText("The application usage guidelines step-by-step !!!");
        StyledDocument doc = txtPaneUsageGuide.getStyledDocument();
            SimpleAttributeSet defaultSetting = new SimpleAttributeSet();
        StyleConstants.setForeground(defaultSetting, Color.BLACK);
        StyleConstants.setBackground(defaultSetting, Color.WHITE);
        StyleConstants.setBold(defaultSetting, true);
        SimpleAttributeSet keyWord = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWord, Color.RED);
        StyleConstants.setBackground(keyWord, Color.YELLOW);
        StyleConstants.setBold(keyWord, true);
        SimpleAttributeSet keyWordIngestion = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWordIngestion, Color.GREEN);
        StyleConstants.setBackground(keyWordIngestion, Color.DARK_GRAY);
        StyleConstants.setBold(keyWordIngestion, true);
        SimpleAttributeSet keyWordProcessing = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWordProcessing, Color.RED);
        StyleConstants.setBackground(keyWordProcessing, Color.YELLOW);
        StyleConstants.setBold(keyWordProcessing, true);
        SimpleAttributeSet keyWordStorage = new SimpleAttributeSet();
        StyleConstants.setForeground(keyWordStorage, Color.RED);
        StyleConstants.setBackground(keyWordStorage, Color.YELLOW);
        StyleConstants.setBold(keyWordStorage, true);
        try {
            doc.insertString(0, "-----------------The application usage guidelines step-by-step !!!-----------\n", keyWord);
            doc.insertString(doc.getLength(), "If the application is allocating the resources for the first time for the pipeline then go to"
                    + "DPP resource allocation details & scaling tab/module\n to find the intial resource allocation required for the pipeline"
                    + "by setting the value in the future workload and end-to-end latency with full-scale optimization(default)"
                    + "strategy.\n After getting the info about what what resources are required at each layer then start building the resource cluster for each"
                    + "layer starting from ingestion layer, then storage layer and finally for processing layer", defaultSetting);
            doc.insertString(doc.getLength(), "------------------INGESTION LAYER--------------------\n", keyWordIngestion);
            txtPaneUsageGuide.setText("1.");

        } catch (BadLocationException e) {
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtPaneUsageGuide = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("The Application Usage Guidelines");
        setLocation(new java.awt.Point(0, 0));

        txtPaneUsageGuide.setEditable(false);
        jScrollPane1.setViewportView(txtPaneUsageGuide);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsageGuideForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsageGuideForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsageGuideForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsageGuideForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsageGuideForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane txtPaneUsageGuide;
    // End of variables declaration//GEN-END:variables
}
